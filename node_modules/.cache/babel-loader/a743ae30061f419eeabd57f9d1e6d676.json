{"ast":null,"code":"import _objectSpread from\"C:/Users/23703/OneDrive/\\u684C\\u9762/exam/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/23703/OneDrive/\\u684C\\u9762/exam/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import*as React from'react';import'../App.css';//  The code is refer to the tictac example from the tutorial solution\nfunction Tictac(){var defaultBoard=[['','',''],['','',''],['','','']];var _React$useState=React.useState(defaultBoard),_React$useState2=_slicedToArray(_React$useState,2),board=_React$useState2[0],setBoard=_React$useState2[1];var _React$useState3=React.useState('O'),_React$useState4=_slicedToArray(_React$useState3,2),player=_React$useState4[0],setPlayer=_React$useState4[1];var _React$useState5=React.useState(''),_React$useState6=_slicedToArray(_React$useState5,2),winPlayer=_React$useState6[0],setWinPlayer=_React$useState6[1];var _React$useState7=React.useState(0),_React$useState8=_slicedToArray(_React$useState7,2),click=_React$useState8[0],numClick=_React$useState8[1];var handleClick=function handleClick(rowNum,colNum){setCell(rowNum,colNum);numClick(click+1);console.log(click);checkWin();};var setCell=function setCell(x,y){var currPlayer=player;var newBoard=_objectSpread({},board);//[ ... board ]\nnewBoard[x][y]=currPlayer;setBoard(newBoard);setPlayer(player==='X'?'O':'X');};var setWinCount=function setWinCount(winPlayer){if(winPlayer==='O'){var curLeft=localStorage.getItem('X');localStorage.setItem(\"X\",parseInt(curLeft)-1);}};var checkWin=function checkWin(){var winningLines=[[[0,0],[0,1],[0,2]],[[1,0],[1,1],[1,2]],[[2,0],[2,1],[2,2]],[[0,0],[1,0],[2,0]],[[0,1],[1,1],[2,1]],[[0,2],[1,2],[2,2]],[[0,0],[1,1],[2,2]],[[0,2],[1,1],[2,0]]];for(var _i=0,_winningLines=winningLines;_i<_winningLines.length;_i++){var line=_winningLines[_i];var _line=_slicedToArray(line,3),a=_line[0],b=_line[1],c=_line[2];if(board[a[0]][a[1]]!==''&&board[a[0]][a[1]]===board[b[0]][b[1]]&&board[b[0]][b[1]]===board[c[0]][c[1]]){//Game won\nsetWinPlayer(player==='X'?'X':'O');setWinCount(player);return;}}// all filled\n// let no = Nowin();\n// console.log('no win',no)\n// if (no=== true){\n//   alert('no body win');\n//   setWinPlayer('N')\n// }\n};// const Nowin =()=>{\n//   const temp = [...board]\n//   for (let i = 0; i<temp.length;i++){\n//     for (let j = 0; j<temp[i].length; j++){\n//       console.log(i,j,temp)\n//       if (temp[i][j]===''){\n//         return false;\n//       }\n//       if (i===2 && j===2){\n//         return true;\n//       }\n//     } \n//   }\n// }\nvar color={'X':'rgb(220,220,255','O':'rgb(255,220,220)'};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container1\",style:{textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{className:\"basicBoard\",children:Array.from({length:3}).map(function(row,rowNum){return/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:Array.from({length:3}).map(function(cell,colNum){return/*#__PURE__*/_jsx(\"div\",{className:\"cell\",onClick:function onClick(){return handleClick(rowNum,colNum);},style:{backgroundColor:board[rowNum][colNum]===''?color[player]:'transparent'},children:board[rowNum][colNum]});})});})}),/*#__PURE__*/_jsxs(\"div\",{className:\"info\",style:{display:click===9||winPlayer!==''?'flex':'none'},children:[winPlayer===''?/*#__PURE__*/_jsx(\"p\",{style:{fontSize:'14pt'},children:\"No one wins\"}):/*#__PURE__*/_jsxs(\"p\",{style:{fontSize:'14pt'},children:[\" \",winPlayer,\" wins\"]}),\" \",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsxs(\"p\",{children:[\"A total of \",click,\" moves were complete\"]})]})]})});}export default Tictac;","map":{"version":3,"sources":["C:/Users/23703/OneDrive/桌面/exam/src/pages/tictac.js"],"names":["React","Tictac","defaultBoard","useState","board","setBoard","player","setPlayer","winPlayer","setWinPlayer","click","numClick","handleClick","rowNum","colNum","setCell","console","log","checkWin","x","y","currPlayer","newBoard","setWinCount","curLeft","localStorage","getItem","setItem","parseInt","winningLines","line","a","b","c","color","textAlign","Array","from","length","map","row","cell","backgroundColor","display","fontSize"],"mappings":"4cAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAEA,MAAO,YAAP,CACA;AACA,QAASC,CAAAA,MAAT,EAAkB,CAChB,GAAMC,CAAAA,YAAY,CAAI,CAAE,CAAE,EAAF,CAAM,EAAN,CAAU,EAAV,CAAF,CACA,CAAE,EAAF,CAAM,EAAN,CAAU,EAAV,CADA,CAEA,CAAE,EAAF,CAAM,EAAN,CAAU,EAAV,CAFA,CAAtB,CADgB,oBAIUF,KAAK,CAACG,QAAN,CAAeD,YAAf,CAJV,oDAITE,KAJS,qBAIFC,QAJE,0CAKYL,KAAK,CAACG,QAAN,CAAe,GAAf,CALZ,qDAKTG,MALS,qBAKDC,SALC,0CAMkBP,KAAK,CAACG,QAAN,CAAe,EAAf,CANlB,qDAMTK,SANS,qBAMEC,YANF,0CAOUT,KAAK,CAACG,QAAN,CAAe,CAAf,CAPV,qDAOTO,KAPS,qBAOFC,QAPE,qBAShB,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAASC,MAAT,CAAoB,CACtCC,OAAO,CAACF,MAAD,CAASC,MAAT,CAAP,CACAH,QAAQ,CAACD,KAAK,CAAC,CAAP,CAAR,CACAM,OAAO,CAACC,GAAR,CAAYP,KAAZ,EACAQ,QAAQ,GACT,CALD,CAMA,GAAMH,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACI,CAAD,CAAIC,CAAJ,CAAU,CACxB,GAAMC,CAAAA,UAAU,CAAGf,MAAnB,CACA,GAAMgB,CAAAA,QAAQ,kBAAOlB,KAAP,CAAd,CAA6B;AAC7BkB,QAAQ,CAACH,CAAD,CAAR,CAAYC,CAAZ,EAAiBC,UAAjB,CAEAhB,QAAQ,CAACiB,QAAD,CAAR,CACAf,SAAS,CAACD,MAAM,GAAK,GAAX,CAAgB,GAAhB,CAAqB,GAAtB,CAAT,CACD,CAPD,CASA,GAAMiB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACf,SAAD,CAAe,CACjC,GAAGA,SAAS,GAAK,GAAjB,CAAqB,CACnB,GAAMgB,CAAAA,OAAO,CAAGC,YAAY,CAACC,OAAb,CAAqB,GAArB,CAAhB,CACAD,YAAY,CAACE,OAAb,CAAqB,GAArB,CAA0BC,QAAQ,CAACJ,OAAD,CAAR,CAAkB,CAA5C,EACD,CACF,CALD,CAMA,GAAMN,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMW,CAAAA,YAAY,CAAG,CACnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CADmB,CAEnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CAFmB,CAGnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CAHmB,CAInB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CAJmB,CAKnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CALmB,CAMnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CANmB,CAOnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CAPmB,CAQnB,CAAC,CAAC,CAAD,CAAI,CAAJ,CAAD,CAAS,CAAC,CAAD,CAAI,CAAJ,CAAT,CAAiB,CAAC,CAAD,CAAI,CAAJ,CAAjB,CARmB,CAArB,CAWA,2BAAiBA,YAAjB,8BAA+B,CAA1B,GAAIC,CAAAA,IAAI,kBAAR,CAA0B,yBACXA,IADW,IACtBC,CADsB,UACnBC,CADmB,UAChBC,CADgB,UAE7B,GAAI7B,KAAK,CAAC2B,CAAC,CAAC,CAAD,CAAF,CAAL,CAAYA,CAAC,CAAC,CAAD,CAAb,IAAsB,EAAtB,EAA4B3B,KAAK,CAAC2B,CAAC,CAAC,CAAD,CAAF,CAAL,CAAYA,CAAC,CAAC,CAAD,CAAb,IAAsB3B,KAAK,CAAC4B,CAAC,CAAC,CAAD,CAAF,CAAL,CAAYA,CAAC,CAAC,CAAD,CAAb,CAAlD,EAAuE5B,KAAK,CAAC4B,CAAC,CAAC,CAAD,CAAF,CAAL,CAAYA,CAAC,CAAC,CAAD,CAAb,IAAsB5B,KAAK,CAAC6B,CAAC,CAAC,CAAD,CAAF,CAAL,CAAYA,CAAC,CAAC,CAAD,CAAb,CAAjG,CAAoH,CAClH;AACAxB,YAAY,CAACH,MAAM,GAAK,GAAX,CAAiB,GAAjB,CAAuB,GAAxB,CAAZ,CACAiB,WAAW,CAACjB,MAAD,CAAX,CACA,OACD,CACF,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA7BD,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,GAAM4B,CAAAA,KAAK,CAAG,CACZ,IAAI,iBADQ,CAEZ,IAAI,kBAFQ,CAAd,CAKA,mBAAO,sCACP,aAAK,SAAS,CAAC,YAAf,CAA4B,KAAK,CAAE,CAACC,SAAS,CAAC,QAAX,CAAnC,wBACE,YAAK,SAAS,CAAC,YAAf,UACGC,KAAK,CAACC,IAAN,CAAW,CAACC,MAAM,CAAE,CAAT,CAAX,EAAwBC,GAAxB,CAA4B,SAACC,GAAD,CAAM3B,MAAN,CAAkB,CAC3C,mBACE,YAAK,SAAS,CAAC,KAAf,UACGuB,KAAK,CAACC,IAAN,CAAW,CAACC,MAAM,CAAE,CAAT,CAAX,EAAwBC,GAAxB,CAA4B,SAACE,IAAD,CAAO3B,MAAP,CAAkB,CAC7C,mBACA,YACE,SAAS,CAAC,MADZ,CAEE,OAAO,CAAE,yBAAMF,CAAAA,WAAW,CAACC,MAAD,CAASC,MAAT,CAAjB,EAFX,CAGE,KAAK,CAAE,CAAC4B,eAAe,CAAEtC,KAAK,CAACS,MAAD,CAAL,CAAcC,MAAd,IAAwB,EAAxB,CAA6BoB,KAAK,CAAC5B,MAAD,CAAlC,CAA6C,aAA/D,CAHT,UAKGF,KAAK,CAACS,MAAD,CAAL,CAAcC,MAAd,CALH,EADA,CASD,CAVA,CADH,EADF,CAcD,CAfF,CADH,EADF,cAmBE,aAAK,SAAS,CAAC,MAAf,CAAsB,KAAK,CAAE,CAAC6B,OAAO,CAAEjC,KAAK,GAAG,CAAR,EAAaF,SAAS,GAAG,EAAzB,CAA8B,MAA9B,CAAuC,MAAjD,CAA7B,WAAwFA,SAAS,GAAG,EAAZ,cAAiB,UAAG,KAAK,CAAE,CAACoC,QAAQ,CAAC,MAAV,CAAV,yBAAjB,cAAgE,WAAG,KAAK,CAAE,CAACA,QAAQ,CAAC,MAAV,CAAV,eAA+BpC,SAA/B,WAAxJ,kBAA6M,aAA7M,cACA,mCAAgBE,KAAhB,0BADA,GAnBF,GADO,EAAP,CAyBD,CACD,cAAeT,CAAAA,MAAf","sourcesContent":["import * as React from 'react';\r\n\r\nimport '../App.css';\r\n//  The code is refer to the tictac example from the tutorial solution\r\nfunction Tictac() {\r\n  const defaultBoard =  [ [ '', '', '', ], \r\n                        [ '', '', '', ],\r\n                        [ '', '', '', ], ]\r\n  const [board, setBoard] = React.useState(defaultBoard); \r\n  const [player, setPlayer] = React.useState('O');\r\n  const [winPlayer, setWinPlayer] = React.useState(''); \r\n  const [click, numClick] = React.useState(0)\r\n\r\n  const handleClick = (rowNum, colNum) => {\r\n    setCell(rowNum, colNum);\r\n    numClick(click+1)\r\n    console.log(click)\r\n    checkWin();\r\n  }\r\n  const setCell = (x, y) => {\r\n    const currPlayer = player;\r\n    const newBoard = {...board}; //[ ... board ]\r\n    newBoard[x][y] = currPlayer; \r\n\r\n    setBoard(newBoard);\r\n    setPlayer(player === 'X'? 'O': 'X');\r\n  }\r\n\r\n  const setWinCount = (winPlayer) => {\r\n    if(winPlayer === 'O'){\r\n      const curLeft = localStorage.getItem('X')\r\n      localStorage.setItem(\"X\", parseInt(curLeft)-1);\r\n    }\r\n  }\r\n  const checkWin = () => {\r\n    const winningLines = [\r\n      [[0, 0], [0, 1], [0, 2]],\r\n      [[1, 0], [1, 1], [1, 2]],\r\n      [[2, 0], [2, 1], [2, 2]],\r\n      [[0, 0], [1, 0], [2, 0]],\r\n      [[0, 1], [1, 1], [2, 1]],\r\n      [[0, 2], [1, 2], [2, 2]],\r\n      [[0, 0], [1, 1], [2, 2]],\r\n      [[0, 2], [1, 1], [2, 0]],\r\n    ]\r\n\r\n    for (let line of winningLines) {\r\n      const [a, b, c] = line;\r\n      if (board[a[0]][a[1]] !== '' && board[a[0]][a[1]] === board[b[0]][b[1]] && board[b[0]][b[1]] === board[c[0]][c[1]]) {\r\n        //Game won\r\n        setWinPlayer(player === 'X' ? 'X' : 'O')\r\n        setWinCount(player);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // all filled\r\n    // let no = Nowin();\r\n    // console.log('no win',no)\r\n    // if (no=== true){\r\n    //   alert('no body win');\r\n    //   setWinPlayer('N')\r\n    // }\r\n  }\r\n  // const Nowin =()=>{\r\n  //   const temp = [...board]\r\n  //   for (let i = 0; i<temp.length;i++){\r\n  //     for (let j = 0; j<temp[i].length; j++){\r\n  //       console.log(i,j,temp)\r\n  //       if (temp[i][j]===''){\r\n  //         return false;\r\n  //       }\r\n  //       if (i===2 && j===2){\r\n  //         return true;\r\n  //       }\r\n  //     } \r\n  //   }\r\n  // }\r\n\r\n\r\n  const color = {\r\n    'X':'rgb(220,220,255',\r\n    'O':'rgb(255,220,220)'\r\n  }\r\n\r\n  return <>\r\n  <div className='container1' style={{textAlign:'center'}}> \r\n    <div className='basicBoard'>\r\n      {Array.from({length: 3}).map((row, rowNum)  => {\r\n          return (\r\n            <div className='row'> \r\n              {Array.from({length: 3}).map((cell, colNum) => {\r\n                return (\r\n                <div \r\n                  className='cell'\r\n                  onClick={() => handleClick(rowNum, colNum)}\r\n                  style={{backgroundColor: board[rowNum][colNum]==='' ? color[player] : 'transparent'}}\r\n                > \r\n                  {board[rowNum][colNum]}\r\n                </div>\r\n                )\r\n              })}\r\n            </div>)\r\n        })}\r\n    </div>\r\n    <div className='info' style={{display: click===9 || winPlayer!=='' ? 'flex' : 'none'}}>{winPlayer==='' ? <p style={{fontSize:'14pt'}}>No one wins</p> : <p style={{fontSize:'14pt'}}> {winPlayer} wins</p> } <br />\r\n    <p >A total of {click} moves were complete</p>\r\n    </div>\r\n  </div>\r\n  </>\r\n}\r\nexport default Tictac;"]},"metadata":{},"sourceType":"module"}