{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\23703\\\\OneDrive\\\\\\u684C\\u9762\\\\exam\\\\src\\\\pages\\\\tictac.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport '../App.css'; //  The code is refer to the tictac example from the tutorial solution\n\nfunction Tictac() {\n  _s();\n\n  const defaultBoard = [['', '', ''], ['', '', ''], ['', '', '']];\n  const [board, setBoard] = React.useState(defaultBoard);\n  const [player, setPlayer] = React.useState('O');\n\n  const handleClick = (rowNum, colNum) => {\n    setCell(rowNum, colNum); // checkWin();\n  };\n\n  const setCell = (x, y) => {\n    const currPlayer = player;\n    const newBoard = { ...board\n    }; //[ ... board ]\n\n    console.log(newBoard);\n    newBoard[x][y] = currPlayer;\n    setBoard(newBoard);\n    setPlayer(player === 'X' ? 'O' : 'X');\n  };\n\n  const setBGcolor = (x, y) => {\n    // if (board[x][y]==='' && player==='O'){\n    //   return 'P1cell'\n    // }\n    // else if (board[x][y]==='' && player==='X'){\n    //   return 'P2cell'\n    // }else{\n    //   return 'cell'\n    // }\n    return 'cell';\n  };\n\n  const setWinCount = winPlayer => {\n    if (winPlayer === 'O') {\n      const curLeft = localStorage.getItem('X');\n      localStorage.setItem(\"X\", parseInt(curLeft) - 1);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        textAlign: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"basicBoard\",\n        children: Array.from({\n          length: 3\n        }).map((row, rowNum) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: Array.from({\n              length: 3\n            }).map((cell, colNum) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cell\",\n                onClick: () => handleClick(rowNum, colNum),\n                style: {\n                  backgroundColor: board[rowNum][colNum] === '' ? 'red' : 'non'\n                },\n                children: board[rowNum][colNum]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 17\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }, this)\n  }, void 0, false);\n}\n\n_s(Tictac, \"EtgBpCtvIf4yGA8DTQO5FEDVs6U=\");\n\n_c = Tictac;\nexport default Tictac;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tictac\");","map":{"version":3,"sources":["C:/Users/23703/OneDrive/桌面/exam/src/pages/tictac.js"],"names":["React","Tictac","defaultBoard","board","setBoard","useState","player","setPlayer","handleClick","rowNum","colNum","setCell","x","y","currPlayer","newBoard","console","log","setBGcolor","setWinCount","winPlayer","curLeft","localStorage","getItem","setItem","parseInt","textAlign","Array","from","length","map","row","cell","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\n\r\nimport '../App.css';\r\n//  The code is refer to the tictac example from the tutorial solution\r\nfunction Tictac() {\r\n  const defaultBoard =  [ [ '', '', '', ], \r\n                        [ '', '', '', ],\r\n                        [ '', '', '', ], ]\r\n  const [board, setBoard] = React.useState(defaultBoard); \r\n  const [player, setPlayer] = React.useState('O');\r\n\r\n  const handleClick = (rowNum, colNum) => {\r\n    setCell(rowNum, colNum);\r\n    // checkWin();\r\n  }\r\n  const setCell = (x, y) => {\r\n    const currPlayer = player;\r\n    const newBoard = {...board}; //[ ... board ]\r\n    console.log(newBoard);\r\n    newBoard[x][y] = currPlayer; \r\n\r\n    setBoard(newBoard);\r\n    setPlayer(player === 'X'? 'O': 'X');\r\n  }\r\n  const setBGcolor = (x,y) =>{\r\n    // if (board[x][y]==='' && player==='O'){\r\n    //   return 'P1cell'\r\n    // }\r\n    // else if (board[x][y]==='' && player==='X'){\r\n    //   return 'P2cell'\r\n    // }else{\r\n    //   return 'cell'\r\n    // }\r\n    return 'cell';\r\n  }\r\n\r\n  const setWinCount = (winPlayer) => {\r\n    if(winPlayer === 'O'){\r\n      const curLeft = localStorage.getItem('X')\r\n      localStorage.setItem(\"X\", parseInt(curLeft)-1);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return <>\r\n  <div className='container' style={{textAlign:'center'}}> \r\n    <div className='basicBoard'>\r\n      {Array.from({length: 3}).map((row, rowNum)  => {\r\n          return (\r\n            <div className='row'> \r\n              {Array.from({length: 3}).map((cell, colNum) => {\r\n                return (\r\n                <div \r\n                  className='cell'\r\n                  onClick={() => handleClick(rowNum, colNum)}\r\n                  style={{backgroundColor: board[rowNum][colNum]==='' ? 'red' : 'non'}}\r\n                > \r\n                  {board[rowNum][colNum]}\r\n                </div>\r\n                )\r\n              })}\r\n            </div>)\r\n        })}\r\n\r\n    </div>\r\n  </div>\r\n  </>\r\n}\r\nexport default Tictac;"]},"metadata":{},"sourceType":"module"}