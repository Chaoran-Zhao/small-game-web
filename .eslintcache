[{"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\index.js":"1","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\main.js":"2","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\nav.js":"3","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\App.js":"4","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\tictac.js":"5","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\tower.js":"6","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\footer.js":"7","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\snek.js":"8","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\slido.js":"9"},{"size":207,"mtime":1670204960189,"results":"10","hashOfConfig":"11"},{"size":1329,"mtime":1670215472400,"results":"12","hashOfConfig":"11"},{"size":1994,"mtime":1679916760952,"results":"13","hashOfConfig":"11"},{"size":863,"mtime":1679916775316,"results":"14","hashOfConfig":"11"},{"size":3372,"mtime":1670220452399,"results":"15","hashOfConfig":"11"},{"size":409,"mtime":1670221213470,"results":"16","hashOfConfig":"11"},{"size":139,"mtime":1670211990295,"results":"17","hashOfConfig":"11"},{"size":659,"mtime":1670221585622,"results":"18","hashOfConfig":"11"},{"size":8857,"mtime":1673931649176,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jskhku",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\index.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\main.js",["40"],"import * as React from 'react';\r\n\r\nimport '../App.css';\r\nfunction Home() {\r\n  const [XValue, setXValue]=React.useState(localStorage.getItem('X'))\r\n  const [reset, setReset]=React.useState(false)\r\n\r\n  const callAPI = async () =>{\r\n    await fetch('https://cgi.cse.unsw.edu.au/~cs6080/raw/data/score.json',{method: 'GET'})\r\n    .then((data)=>data.json())  \r\n    .then((res)=>{\r\n      console.log('fetching',res);\r\n      setXValue(res.score);\r\n      localStorage.setItem('X',res.score)\r\n    })\r\n  }\r\n  React.useEffect(() => {\r\n    if (localStorage.getItem('X')===undefined || localStorage.getItem('X')===null){\r\n      callAPI()\r\n    }\r\n  }, [reset]);\r\n\r\n  const congrate = () => {\r\n    alert('Congratulations!' );\r\n    localStorage.removeItem('X');\r\n    setReset(!reset);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (XValue===0){\r\n      congrate()\r\n    }\r\n  }, [XValue]);\r\n\r\n  return <>\r\n  <div className='container' style={{textAlign:'center'}}>\r\n    <div style={{color:'blue', fontSize:'2em'}}> Please choose an option from the sidebar.<br />\r\n    Games left to win: {XValue} <button onClick={()=>{\r\n      localStorage.removeItem('X');\r\n      setReset(!reset)\r\n      // localStorage.setItem('X', parseInt(XValue) - 1);\r\n      // setXValue(parseInt(XValue) - 1);\r\n    }}>Reset</button></div>\r\n  </div></>\r\n  \r\n}\r\nexport default Home;","C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\nav.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\App.js",["41","42"],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\tictac.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\tower.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\footer.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\snek.js",[],"C:\\Users\\23703\\OneDrive\\桌面\\exam\\src\\pages\\slido.js",["43","44","45","46"],"import * as React from 'react';\r\nimport l1 from '../data/shrek/1.png';\r\nimport l2 from '../data/shrek/2.png';\r\nimport l3 from '../data/shrek/3.png';\r\nimport l4 from '../data/shrek/4.png';\r\nimport l5 from '../data/shrek/5.png';\r\nimport l6 from '../data/shrek/6.png';\r\nimport l7 from '../data/shrek/7.png';\r\nimport l8 from '../data/shrek/8.png';\r\n\r\n\r\nexport default function Slido() {\r\n  const [reset, setReset]=React.useState(false)\r\n  const [randSet, setRandom] = React.useState([])\r\n  const [curBlank, setBlank] = React.useState(null)\r\n  const [curMap, setMap] = React.useState({})\r\n  const [movement, setMove] = React.useState(0)\r\n  const [status, setStatus] = React.useState(false)\r\n\r\n  const [active, setActive] = React.useState(false)\r\n\r\n  const check = [2,5,8];\r\n  const list = [l1,l2,l3,l4,l5,l6,l7,l8]//0-7\r\n  const generateRandom = () =>{\r\n    const max = 8;\r\n    const min = 0;\r\n    let randList = [];\r\n    while(randList.length < 9){\r\n      const random = Math.floor(Math.random()*(max-min+1)+min);\r\n      if(randList.indexOf(random) === -1 ) {\r\n        randList.push(random);\r\n      }\r\n    }\r\n    // let randList =[1,2,3,4,5,6,7,0,8]\r\n    console.log(randList);\r\n    setRandom(randList);\r\n    for (const i in randList){\r\n      if (randList[i]===0){\r\n        setBlank( parseInt(i));\r\n        console.log(i)\r\n      }\r\n    }\r\n    for (let i=0; i<9;i++){\r\n      const temp = curMap\r\n      temp[i] = list[randList[i]-1]\r\n      setMap(temp)\r\n    }\r\n  }\r\n  React.useEffect(() => {\r\n    generateRandom();\r\n  },[reset])\r\n\r\n  React.useEffect(() => { \r\n  },[curMap])\r\n\r\n  const move =(index)=>{\r\n    setMove(movement+1)\r\n    if (index + 1 ===curBlank && index!==2 & index!==5 && index!==8){\r\n      const temp ={...curMap}\r\n      const temp1 = curMap[index]\r\n      temp[index] = {...curMap[index+1]}\r\n      temp[index+1] = temp1\r\n      setMap(temp)\r\n      setBlank(index)\r\n      if(Winning(temp)){\r\n        const curScore = localStorage.getItem('X')\r\n        localStorage.setItem('X', parseInt(curScore) + 1)\r\n        alert('Correct!')\r\n        setStatus(true)\r\n      }\r\n    }else if (index - 1 === curBlank && index!==0 & index!==3 && index!==6){\r\n      console.log('here wrong')\r\n      const temp ={...curMap}\r\n      const temp1 = curMap[index]\r\n      temp[index] = {...curMap[index-1]}\r\n      temp[index-1] = temp1\r\n      setMap(temp)\r\n      setBlank(index)\r\n      if(Winning(temp)){\r\n        const curScore = localStorage.getItem('X')\r\n        localStorage.setItem('X', parseInt(curScore) + 1)\r\n        alert('Correct!')\r\n        setStatus(true)\r\n      }\r\n    }else if (index + 3 === curBlank){\r\n      const temp ={...curMap}\r\n      const temp1 = curMap[index]\r\n      temp[index] = {...curMap[index+3]}\r\n      temp[index+3] = temp1\r\n      setMap(temp)\r\n      setBlank(index)\r\n      if(Winning(temp)){\r\n        const curScore = localStorage.getItem('X')\r\n        localStorage.setItem('X', parseInt(curScore) + 1)\r\n        alert('Correct!')\r\n        setStatus(true)\r\n      }\r\n    }else if(index -3 === curBlank){\r\n      const temp ={...curMap}\r\n      const temp1 = curMap[index]\r\n      temp[index] = {...curMap[index-3]}\r\n      temp[index-3] = temp1\r\n      setMap(temp)\r\n      setBlank(index)\r\n      if(Winning(temp)){\r\n        const curScore = localStorage.getItem('X')\r\n        localStorage.setItem('X', parseInt(curScore) + 1)\r\n        alert('Correct!')\r\n        setStatus(true)\r\n      }\r\n    } \r\n  }\r\n\r\n  const Winning = (dict)=>{\r\n    for (const i in list){\r\n      if (dict[i]!==list[i]){\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  const SolveP = ()=>{\r\n    const temp ={}\r\n    for (const i in list){    \r\n      temp[i] = list[i]  \r\n    }\r\n    setMap(temp)\r\n  }\r\n\r\n  const arrowUpPressed = useKeyPress('ArrowUp');\r\n  const arrowDownPressed = useKeyPress('ArrowDown');\r\n  const arrowLeftPressed = useKeyPress('ArrowLeft');\r\n  const arrowRightPressed = useKeyPress('ArrowRight');\r\n  React.useEffect(() => {\r\n    if (active===true){\r\n      if (arrowUpPressed) {\r\n        console.log('keyUP');\r\n        console.log(curBlank+3);\r\n        const temp ={...curMap}\r\n        const temp1 = curMap[curBlank+3]\r\n        temp[curBlank+3] = {...curMap[curBlank]}\r\n        temp[curBlank] = temp1\r\n        setMap(temp)\r\n        setBlank(curBlank+3)\r\n        if(Winning(temp)){\r\n          const curScore = localStorage.getItem('X')\r\n          localStorage.setItem('X', parseInt(curScore) + 1)\r\n          alert('Correct!')\r\n          setStatus(true)\r\n        }\r\n      }\r\n      if (arrowDownPressed) {\r\n        console.log('keyDown')\r\n        const temp ={...curMap}\r\n        const temp1 = curMap[curBlank-3]\r\n        temp[curBlank-3] = {...curMap[curBlank]}\r\n        temp[curBlank] = temp1\r\n        setMap(temp)\r\n        setBlank(curBlank-3)\r\n        if(Winning(temp)){\r\n          const curScore = localStorage.getItem('X')\r\n          localStorage.setItem('X', parseInt(curScore) + 1)\r\n          alert('Correct!')\r\n          setStatus(true)\r\n        }\r\n      }\r\n      if (arrowLeftPressed) {\r\n        console.log('keyLeft')\r\n        if (curBlank===2 || curBlank===5 || curBlank===8){\r\n            console.log('should not move')\r\n        }else{\r\n            const temp ={...curMap}\r\n            const temp1 = curMap[curBlank+1]\r\n            temp[curBlank+1] = {...curMap[curBlank]}\r\n            temp[curBlank] = temp1\r\n            setMap(temp)\r\n            setBlank(curBlank+1)\r\n            if(Winning(temp)){\r\n            const curScore = localStorage.getItem('X')\r\n            localStorage.setItem('X', parseInt(curScore) + 1)\r\n            alert('Correct!')\r\n            setStatus(true)\r\n            }\r\n        }\r\n        \r\n      }\r\n      if (arrowRightPressed) {\r\n        console.log('keyRight')\r\n        if (curBlank===0 || curBlank===3 || curBlank===6){\r\n            console.log('should not move')\r\n        }else{\r\n            const temp ={...curMap}\r\n            const temp1 = curMap[curBlank-1]\r\n            temp[curBlank-1] = {...curMap[curBlank]}\r\n            temp[curBlank] = temp1\r\n            setMap(temp)\r\n            setBlank(curBlank-1)\r\n            if(Winning(temp)){\r\n            const curScore = localStorage.getItem('X')\r\n            localStorage.setItem('X', parseInt(curScore) + 1)\r\n            alert('Correct!')\r\n            setStatus(true)\r\n            }\r\n        }\r\n        \r\n      }\r\n    }\r\n    \r\n  }, [arrowUpPressed,arrowDownPressed,arrowLeftPressed,arrowRightPressed]);\r\n\r\n\r\n  return <><div className='container1' style={{textAlign:'center'}}>\r\n    <div onClick={()=>{\r\n      setActive(!active)\r\n    }}><div style={{fontSize:'2rem'}}>Click on the image pieces or click on the plate then use the arrow key to move it!</div>\r\n      <div style={{width: '460px', height: '460px', margin:'0 auto',boxShadow: !active ? 'none' : ' 0 13px 40px -5px hsla(240, 30.1%, 28%, 0.12), 0 8px 32px -8px hsla(0, 0%, 0%, 0.5), 0 -6px 64px -6px hsla(0, 0%, 0%, 0.05)'}} onClick={()=>{\r\n      setActive(!active)\r\n    }}>\r\n    {[...Array(9)].map((e,index) => { return (\r\n      <>{check.includes(index) \r\n        ? <><div style={{display:'inline-flex', width: '150px', height: '150px',border: '1px solid #333',textAlign: 'center',}} key={index}><img src={curMap[index]} alt=\"\" \r\n        onClick={()=>{\r\n          move(index);}}></img></div><br /></> \r\n        : <><div style={{display: 'inline-flex', width: '150px', height: '150px',border: '1px solid #333',textAlign: 'center',}} key={index}><img src={curMap[index]} alt=\"\"\r\n        onClick={()=>{\r\n          move(index);}}></img></div></>}</>\r\n    )})} <br />\r\n    <button onClick={()=>{\r\n      SolveP();\r\n      setStatus(true);\r\n      console.log(status)\r\n      setMove(1)\r\n      }} disabled={status===true ? true : false}> Solve</button>\r\n    <button onClick={()=>{\r\n      setReset(!reset); \r\n      setMove(0)\r\n      setStatus(false);   \r\n      }} disabled={movement===0 && status!==true ? true : false}> Reset</button>  </div>\r\n      </div>\r\n  </div></>\r\n\r\n}\r\n\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = React.useState(false);\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n  // Add event listeners\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n  return keyPressed;\r\n}",{"ruleId":"47","severity":1,"message":"48","line":33,"column":6,"nodeType":"49","endLine":33,"endColumn":14,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":7,"column":8,"nodeType":"53","messageId":"54","endLine":7,"endColumn":13},{"ruleId":"51","severity":1,"message":"55","line":8,"column":8,"nodeType":"53","messageId":"54","endLine":8,"endColumn":12},{"ruleId":"51","severity":1,"message":"56","line":14,"column":10,"nodeType":"53","messageId":"54","endLine":14,"endColumn":17},{"ruleId":"47","severity":1,"message":"57","line":51,"column":5,"nodeType":"49","endLine":51,"endColumn":12,"suggestions":"58"},{"ruleId":"47","severity":1,"message":"59","line":210,"column":6,"nodeType":"49","endLine":210,"endColumn":74,"suggestions":"60"},{"ruleId":"47","severity":1,"message":"61","line":269,"column":6,"nodeType":"49","endLine":269,"endColumn":8,"suggestions":"62"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'congrate'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-unused-vars","'Tower' is defined but never used.","Identifier","unusedVar","'Snek' is defined but never used.","'randSet' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'generateRandom'. Either include it or remove the dependency array.",["64"],"React Hook React.useEffect has missing dependencies: 'Winning', 'active', 'curBlank', and 'curMap'. Either include them or remove the dependency array. You can also do a functional update 'setBlank(c => ...)' if you only need 'curBlank' in the 'setBlank' call.",["65"],"React Hook React.useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.",["66"],{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [XValue, congrate]",{"range":"75","text":"76"},"Update the dependencies array to be: [generateRandom, reset]",{"range":"77","text":"78"},"Update the dependencies array to be: [arrowUpPressed, arrowDownPressed, arrowLeftPressed, arrowRightPressed, active, curBlank, curMap, Winning]",{"range":"79","text":"80"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"81","text":"82"},[856,864],"[XValue, congrate]",[1514,1521],"[generateRandom, reset]",[6339,6407],"[arrowUpPressed, arrowDownPressed, arrowLeftPressed, arrowRightPressed, active, curBlank, curMap, Winning]",[8760,8762],"[downHandler, upHandler]"]